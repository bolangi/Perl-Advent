Author: Joel Roth <joelz@pobox.com>
Title: Trimming audio files with Audio::Nama
Topic: Audio::Nama

=encoding utf8

=head2 Our task

We want to remove undesired parts of an audio file,
such as various info breaks during a radio play. Stated
differently, we want to extract relevant parts of an audio
file, and stitch them together into a new file. 

=head2 Our hammer

To do this, we install L<Ecasound|https://ecasound.seul.org/ecasound/>, a general-purpose audio
engine and L<Audio::Nama>, which configures Ecasound to perform
the recording, playback or other tasks at hand. 

We also need git, which Nama uses to manage project state,
provide for branching, undo, etc.

The first run of C<nama> creates a C<$HOME/nama> directory for 
project files and a configuration file C<$HOME/.namarc>. 

=head2 Create a new project, add a track and import an audio file

We'll create a new project called 'christmas'.

C<$ nama -c christmas>

We get a startup banner, then this empty track listing:
 
	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  MON     Main bus              CH 1/2        100    50
	  2  Mixdown               OFF     track Main            --             --    --

	nama christmas Mixdown >

In the prompt, 'christmas' is the project, 'Mixdown', the current track. 

We create a separate track to accommodate our audio file:

	nama christmas Mixdown > add carol

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  MON     Main bus              CH 1/2        100    50
	  2  Mixdown               OFF     track Main            --             --    --
	  3  carol                 MON     CH 1                  Main bus      100    50

Now import our audio source:

	nama christmas carol > import ~/music/christmas-carol.mp3

	format: s16_le,2,12000
	importing /home/jroth/music/christmas-carol.mp3 as /home/jroth/nama/christmas/.wav/carol_1.wav, converting to s16_le,2,44100,i

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  MON     Main bus              CH 1/2        100    50
	  2  Mixdown               OFF     track Main            --             --    --
	  3  carol                 PLAY    carol_1.wav           Main bus      100    50

We can now press SPACE to start/stop playback. 

=head2 Audio network basics: the chain setup file

Nama configures the audio network by generating a
definition file or I<chain setup> for the Ecasound
audio engine.

A chain setup is a graph composed of chains and loop
devices.  Chains are edges in the graph, each streaming an
audio signal. Each chain must have one input and one output.
The terminations can be an audio device, a RIFF (.wav) file,
or a loop device. Chains can host effect-processing plugins
called I<chain operators>, which are included in Ecasound as
well as provided by numerous L<LADSPA|https://ladspa.org>
and L<LV2|https://wiki.linuxaudio.org/apps/categories/lv2_plugins>
authors. 

A chain reflects the current state of its corresponding
track. The chain number in a chain setup generated by Nama
almost always matches the track number.

Here is a simple chain setup:

	# ecasound chainsetup file

	# general

	-z:mixmode,sum -b 1024 -z:nodb -z:intbuf
	
	# audio inputs

	-a:3 -f:s16_le,2,44100 -i:/home/jroth/nama/christmas/.wav/carol_1.wav

	# audio outputs

	-a:3 -o:alsa,default

There is one chain, with label C<3>. The input is from a .wav
file, and the output goes to the default soundcard. There is
an C<-f> argument that describes the audio signal bit width,
channel count and sample frequency.

For more complicated graphs, we can add a loop device, which
is a buffer stage. A loop device is a kind of hub: a node capable
of connecting to multiple chains on both input and output.

Here is the chain setup for listening to our radio play
with nama configured as per the track listing above.

	# audio inputs

	-a:1 -f:s16_le,16,44100,i -i:loop,Main_in
	-a:3 -f:s16_le,2,44100 -i:/home/jroth/nama/christmas/.wav/carol_1.wav

	# audio outputs

	-a:1 -o:alsa,default
	-a:3 -f:s16_le,16,44100,i -o:loop,Main_in

We have two chains joined through a loop device.

=head2 Buses and mixers

"Why bother to have the intermediate loop device?" I
hear you ask. Answer: To serve as a mixer. Each user track
initially belongs to a bus called 'Main'. These tracks sum
their outputs into the 'Main' track, which provides a master fader.

Repeating, a bus in Nama is software mixer with multiple
signals in, and one signal out. A bus is implemented by one or
more tracks summing their signals into one output track via
a loop device. Switching the output track for the bus to OFF
removes the bus from the network. In this case, the entire
network is eliminated.

	nama christmas carol > 1 off  # same as 'Main off'

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	================================================================================
	  1  Main                  OFF     Main bus              --            100    50
	  2  Mixdown               OFF     track Main            --             --    --
	  3  carol           PLAY  OFF     carol_1.wav           --            100    50
	No audio tracks to record or play.

Track C<carol>'s status is C<OFF>, despite its setting, because
it has no sink, no consumer for its audio stream.

Now let's send our audio directly to the soundcard:

	nama christmas Main > 3 send 1

	Track carol: soundcard channel 1 is now a send target

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	================================================================================
	  1  Main                  OFF     Main bus              --            100    50
	  2  Mixdown               OFF     track Main            --             --    --
	  3  carol                 PLAY    carol_1.wav           Main bus, CH  100    50

	Now at: 0:00
	Engine is ready.

The network reappears with a single chain, same as in the first
chain setup illustrated. To recover the standard playback
configuration:

	nama christmas carol > 3 nosend; 1 mon

We'll now use a specialized type of bus called a 'sequence'
to connect end-to-end desired clips from our radio
play. 

First, to demonstrate, we define a clip running from 10 to 20 seconds in the parent file.

	nama christmas carol > set-region 10.0 20.0
	nama christmas carol > show-track

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  3  carol                 PLAY    carol_1.wav           Main bus      100    50
	Length: 10.000 / 0:10
	Region start: 10.000 / 0:10 (10.0)
	Region end: 20.000 / 0:20 (20.0)

The region definition adds a 'select' term to the chainsetup: 

	-a:3 -f:s16_le,2,44100 -i:select,10,10,/home/jroth/nama/christmas/.wav/carol_1.wav

We can play this clip at an arbitrary time with the 'shift'
command.  C<shift 30.0> leads to a 'playat' term
entering the input definition.

	-a:3 -f:s16_le,2,44100 -i:playat,30.0,select,10,10,/home/jroth/nama/christmas/.wav/carol_1.wav

Lets's remove the region definition and 
playback offset:

	nama christmas carol > remove-region; unshift

	carol: Region definition removed. Full track will play.

=head2 Just do it

Now, towards our goal, we need to mark the beginning
and end of each clip we want to keep, then put the clips in
sequence.  

We can do that by listening to the track and using the
C<toggle-clip> command (bound to the F1 key) to alternately
drop clip start and end marks. 

We have commands like C<fw 5:00>, C<rw 30> and various
hotkeys to navigate through the file, bump or remove
marks, etc.

After some trial and error, we have the correct marks
for a contrived example: four five-minute sections of content
separated by 40-second breaks.

	nama christmas carol > list-marks
	0 40.0 clip-start-0020
	1 340.0 clip-end-0021
	2 380.0 clip-start-0022
	3 680.0 clip-end-0023
	4 720.0 clip-start-0024
	5 1020.0 clip-end-0025
	6 1060.0 clip-start-0026
	*7 1360.0 clip-end-0027


=head2 The final gathering

We can now assemble our clips into one sequence:

	nama christmas carol > gather

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  MON     Main bus              CH 1/2        100    50
	  2  Mixdown               OFF     track Main            --             --    --
	  3  carol                 MON     carol sequence        Main bus      100    50

Note that the source for track 3 has changed from 'carol_1.wav' to
'carol sequence'.
 
If we show all tracks, we see the separate clips that
deliver their audio signals to track 'carol'.

	nama christmas carol > sha # show all tracks

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  MON     Main bus              CH 1/2        100    50
	  2  Mixdown               OFF     track Main            --             --    --
	  3  carol                 MON     carol sequence        Main bus      100    50
	  4  carol-1-carol-v       PLAY    carol_1.wav           carol sequen  100    50
	  5  carol-2-carol-v       PLAY    carol_1.wav           carol sequen  100    50
	  6  carol-3-carol-v       PLAY    carol_1.wav           carol sequen  100    50
	  7  carol-4-carol-v       PLAY    carol_1.wav           carol sequen  100    50

In the chain setup we see that the source for each chain is
a clip, and these are positioned sequentially in time:

	nama christmas carol > chains

	# audio inputs

	-a:1 -f:s16_le,16,44100,i -i:loop,Main_in
	-a:3 -f:s16_le,16,44100,i -i:loop,carol_in
	-a:4 -f:s16_le,2,44100 -i:select,40,300,/home/jroth/nama/christmas/.wav/carol_1.wav
	-a:5 -f:s16_le,2,44100 -i:playat,300,select,380,300,/home/jroth/nama/christmas/.wav/carol_1.wav
	-a:6 -f:s16_le,2,44100 -i:playat,600,select,720,300,/home/jroth/nama/christmas/.wav/carol_1.wav
	-a:7 -f:s16_le,2,44100 -i:playat,900,select,1060,300,/home/jroth/nama/christmas/.wav/carol_1.wav

	# audio outputs

	-a:1 -o:alsa,default
	-a:3 -f:s16_le,16,44100,i -o:loop,Main_in
	-a:4,5,6,7 -f:s16_le,16,44100,i -o:loop,carol_in

We can listen through to make sure it sounds right, using
SPACE for play/stop. 

Assuming we resolved any hiccups, we are now ready to render the project:

	nama christmas carol > mixdown
	Enabling mixdown to file

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  MON     Main bus              Mixdown       100    50
	  2  Mixdown               REC v1  Main                  --             --    --
	  3  carol                 MON     carol sequence        Main bus      100    50

	Now at: 0:00
	Engine is ready.
	Press SPACE to start the mixdown.

	Engine is running
	Engine is finished at 16:27

	nama christmas carol > recorded: Mixdown_1.wav
	Setting mixdown playback mode.

	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  OFF     Main bus              --            100    50
	  2  Mixdown               PLAY    Mixdown_1.wav         --             --    --
	  3  carol            MON  OFF     carol sequence        --            100    50

If configured, the mixdown step also generates ogg and mp3
encodings with oggenc and lame, respectively. These files
appear with the project name in the project directory:
C<~/nama/christmas/christmas_1.mp3>
C<~/nama/christmas/christmas_1.ogg> 
C<~/nama/christmas/christmas_1.wav> is a symlink
to C<~/nama/christmas/.wav/Mixdown_1.wav>

We can hit SPACE to play our mixdown, or to go back to our
previous configuration:

	nama christmas carol > mixoff
	Leaving mixdown mode.
	 
	 No. Name       Requested  Status  Source                Destination   Vol   Pan
	===============================================================================
	  1  Main                  MON     Main bus              CH 1/2        100    50
	  2  Mixdown               OFF     track Main            --             --    --
	  3  carol                 MON     carol sequence        Main bus      100    50

=head2 How the sausage is made

By starting Nama with the C<-L ChainSetup> logging option, we
can see how the above playback setup is arrived at. First,
all the tracks are routed. At this stage tracks connect to
each other directly. Then the graph is simplified, with dead
branches eliminated. Finally, loop devices are introduced
between tracks where needed. I only show the graph where it
changes, and only include one of the clip tracks (they all 
get pruned in the end.)

	[1513] ChainSetup  (L 106) Graph after bus routing:
	wav_in-carol, carol-Main, wav_in-carol-1-carol-v1

	[1514] ChainSetup  (L 111) Graph after aux sends:
	[1514] ChainSetup  (L 114) Graph with paths from Main:
	wav_in-carol, carol-Main, Main-soundcard_out, wav_in-carol-1-carol-v1

	[1514] ChainSetup  (L 117) Graph with mixdown mods:
	[1514] ChainSetup  (L 216) Graph after simplify_send_routing:
	[1514] ChainSetup  (L 218) Graph after remove_out_of_bounds_tracks:
	[1514] ChainSetup  (L 220) Graph after recursively_remove_inputless_tracks:
	[1515] ChainSetup  (L 222) Graph after recursively_remove_outputless_tracks:
	wav_in-carol, carol-Main, Main-soundcard_out

	[1515] ChainSetup  (L 122) Graph after pruning unterminated branches:
	[1515] ChainSetup  (L 126) Graph after adding loop devices:
	wav_in-carol, carol-Main_in, Main_in-Main, Main-soundcard_out

	[1515] ChainSetup  (L 130) Graph with inserts:

Then we get a debug output showing the four IO object
derived from the graph. These generate the input and
output terms for the two chains. There are different classes for
each type of term.

	bless( { 
	  chain_id_ => 3, 
	  endpoint_ => "wav_in", 
	  track_ => "carol",   
	}, 'Audio::Nama::IO::from_wav' ) 
						   
	bless( {               
	  chain_id_ => 1,      
	  endpoint_ => "soundcard_out", 
	  track_ => "Main",    
	}, 'Audio::Nama::IO::to_alsa_soundcard_device' ) 
						   
	bless( {               
	  chain_id_ => 3,      
	  device_id_ => "loop,Main_in", 
	  endpoint_ => "Main_in", 
	  track_ => "carol",   
	}, 'Audio::Nama::IO::to_loop' ) 
						   
	bless( {               
	  chain_id_ => 1,      
	  device_id_ => "loop,Main_in", 
	  endpoint_ => "Main_in", 
	  track_ => "Main",    
	}, 'Audio::Nama::IO::from_loop' ) 

These classes provide methods that can be overridden by
field values annotated on the graph edges or graph nodes.
Any other methods needed in writing the chain setup file
are proxied to the parent track.

=head2 Thanks for reading!

There are many other things you can do with Nama but that's all for today!

=head2 Showcase

Jeanette Claassen has produced a large number of
L<original|https://www.youtube.com/@jeanette_c3896/videos>
L<songs|https://juliencoder.de/nama> using Nama in
combination with various other music software and hardware.
She began recording music using Ecasound and migrated to
Nama as it became sufficiently featureful.
